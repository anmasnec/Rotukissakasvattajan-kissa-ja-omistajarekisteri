package rekisteri.test;
// Generated by ComTest BEGIN
import java.util.*;
import java.io.*;
import rekisteri.SailoException;
import static org.junit.Assert.*;
import org.junit.*;
import rekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.22 18:53:10 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class RekisteriTest {



  // Generated by ComTest BEGIN
  /** 
   * testPoista70 
   * @throws Exception when error
   */
  @Test
  public void testPoista70() throws Exception {    // Rekisteri: 70
    Rekisteri rekisteri = new Rekisteri(); 
    Kissa sadepilvi1 = new Kissa(); 
    Kissa sadepilvi2 = new Kissa(); 
    Kissa sadepilvi3 = new Kissa(); 
    sadepilvi1.setKissanTunnusNro(1); 
    sadepilvi2.setKissanTunnusNro(2); 
    sadepilvi3.setKissanTunnusNro(3); 
    rekisteri.lisaa(sadepilvi1); 
    rekisteri.lisaa(sadepilvi2); 
    rekisteri.lisaa(sadepilvi3); 
    assertEquals("From: Rekisteri line: 82", 3, rekisteri.etsiKissat("*",0).size()); 
    assertEquals("From: Rekisteri line: 83", 1, rekisteri.poista(sadepilvi1)); 
    assertEquals("From: Rekisteri line: 84", 2, rekisteri.etsiKissat("*",0).size()); 
    assertEquals("From: Rekisteri line: 85", 1, rekisteri.poista(sadepilvi2)); 
    assertEquals("From: Rekisteri line: 86", 1, rekisteri.etsiKissat("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista101 
   * @throws Exception when error
   */
  @Test
  public void testPoista101() throws Exception {    // Rekisteri: 101
    Rekisteri rekisteri = new Rekisteri(); 
    Kissa sadepilvi = new Kissa(); 
    Omistaja sadepilvinen = new Omistaja(); 
    sadepilvi.setOmistajanTunnusNro(1); 
    sadepilvi.setKissanTunnusNro(1); 
    sadepilvinen.setOmistajanTunnusNro(1); 
    rekisteri.lisaa(sadepilvi); 
    rekisteri.lisaa(sadepilvinen); 
    assertEquals("From: Rekisteri line: 111", 1, rekisteri.annaOmistajat(sadepilvi).size()); 
    assertEquals("From: Rekisteri line: 112", 1, rekisteri.poista(sadepilvinen)); 
    assertEquals("From: Rekisteri line: 113", 0, rekisteri.annaOmistajat(sadepilvi).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa141 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa141() throws SailoException {    // Rekisteri: 141
    Rekisteri rekisteri = new Rekisteri(); 
    Kissa sadepilvi1 = new Kissa(); 
    Kissa sadepilvi2 = new Kissa(); 
    Kissa sadepilvi3 = new Kissa(); 
    sadepilvi1.setKissanTunnusNro(1); 
    sadepilvi2.setKissanTunnusNro(2); 
    sadepilvi3.setKissanTunnusNro(3); 
    rekisteri.lisaa(sadepilvi1); 
    rekisteri.lisaa(sadepilvi2); 
    rekisteri.lisaa(sadepilvi3); 
    assertEquals("From: Rekisteri line: 153", 3, rekisteri.etsiKissat("*",0).size()); 
    rekisteri.korvaaTaiLisaa(sadepilvi1); 
    assertEquals("From: Rekisteri line: 155", 3, rekisteri.etsiKissat("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa170 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa170() throws SailoException {    // Rekisteri: 170
    Rekisteri rekisteri = new Rekisteri(); 
    Kissa sadepilvi = new Kissa(); 
    Omistaja sadepilvinen = new Omistaja(); 
    sadepilvi.setOmistajanTunnusNro(1); 
    sadepilvi.setKissanTunnusNro(1); 
    sadepilvinen.setOmistajanTunnusNro(1); 
    rekisteri.lisaa(sadepilvi); 
    rekisteri.lisaa(sadepilvinen); 
    assertEquals("From: Rekisteri line: 180", 1, rekisteri.annaOmistajat(sadepilvi).size()); 
    rekisteri.korvaaTaiLisaa(sadepilvinen); 
    assertEquals("From: Rekisteri line: 182", 1, rekisteri.annaOmistajat(sadepilvi).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa194 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa194() throws SailoException {    // Rekisteri: 194
    Rekisteri rekisteri = new Rekisteri(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); 
    assertEquals("From: Rekisteri line: 199", 0, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 200", 1, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen2); assertEquals("From: Rekisteri line: 201", 2, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 202", 3, rekisteri.getOmistajia()); 
    assertEquals("From: Rekisteri line: 203", 3, rekisteri.getOmistajia()); 
    assertEquals("From: Rekisteri line: 204", sadepilvinen1, rekisteri.annaOmistaja(0)); 
    assertEquals("From: Rekisteri line: 205", sadepilvinen2, rekisteri.annaOmistaja(1)); 
    assertEquals("From: Rekisteri line: 206", sadepilvinen1, rekisteri.annaOmistaja(2)); 
    try {
    assertEquals("From: Rekisteri line: 207", sadepilvinen1, rekisteri.annaOmistaja(3)); 
    fail("Rekisteri: 207 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 208", 4, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 209", 5, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 210", 6, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 211", 7, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 212", 8, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 213", 9, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); assertEquals("From: Rekisteri line: 214", 10, rekisteri.getOmistajia()); 
    rekisteri.lisaa(sadepilvinen1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKissat251 */
  @Test
  public void testAnnaKissat251() {    // Rekisteri: 251
    try {
    Rekisteri rekisteri = new Rekisteri(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(), sadepilvinen3 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); sadepilvinen3.rekisteroi(); 
    rekisteri.lisaa(sadepilvinen1); rekisteri.lisaa(sadepilvinen2); rekisteri.lisaa(sadepilvinen3); 
    int id1 = sadepilvinen1.getOmistajanTunnusNro(); 
    int id2 = sadepilvinen2.getOmistajanTunnusNro(); 
    Kissa sadepilvi11 = new Kissa(id1); rekisteri.lisaa(sadepilvi11); 
    Kissa sadepilvi12 = new Kissa(id1); rekisteri.lisaa(sadepilvi12); 
    Kissa sadepilvi21 = new Kissa(id2); rekisteri.lisaa(sadepilvi21); 
    Kissa sadepilvi22 = new Kissa(id2); rekisteri.lisaa(sadepilvi22); 
    Kissa sadepilvi23 = new Kissa(id2); rekisteri.lisaa(sadepilvi23); 
    List<Kissa> loytyneetKissat; 
    loytyneetKissat = rekisteri.annaKissat(sadepilvinen3); 
    assertEquals("From: Rekisteri line: 269", 0, loytyneetKissat.size()); 
    loytyneetKissat = rekisteri.annaKissat(sadepilvinen1); 
    assertEquals("From: Rekisteri line: 271", 2, loytyneetKissat.size()); 
    assertEquals("From: Rekisteri line: 272", true, loytyneetKissat.get(0) == sadepilvi11); 
    assertEquals("From: Rekisteri line: 273", true, loytyneetKissat.get(1) == sadepilvi12); 
    loytyneetKissat = rekisteri.annaKissat(sadepilvinen2); 
    assertEquals("From: Rekisteri line: 275", 3, loytyneetKissat.size()); 
    assertEquals("From: Rekisteri line: 276", true, loytyneetKissat.get(0) == sadepilvi21); 
    } catch ( Exception e) {
    System.err.println(e.getMessage()); 
    }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta329 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta329() throws SailoException {    // Rekisteri: 329
    String hakemisto = "testiKissakaveri"; 
    File dir = new File(hakemisto); 
    File ftied  = new File(hakemisto+"/kissat.dat"); 
    File fhtied = new File(hakemisto+"/omistajat.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    fhtied.delete(); 
    Rekisteri rekisteri = new Rekisteri();  // tiedostoja ei ole, tulee poikkeus
    try {
    rekisteri.lueTiedostosta(hakemisto); 
    fail("Rekisteri: 342 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    rekisteri = new Rekisteri(); 
    Kissa sadepilvi1 = new Kissa(); 
    Kissa sadepilvi2 = new Kissa(); 
    Kissa sadepilvi3 = new Kissa(); 
    Omistaja sadepilvinen11 = new Omistaja(); 
    Omistaja sadepilvinen21 = new Omistaja(); 
    Omistaja sadepilvinen31 = new Omistaja(); 
    sadepilvi1.setOmistajanTunnusNro(1); 
    sadepilvi2.setOmistajanTunnusNro(2); 
    sadepilvi3.setOmistajanTunnusNro(3); 
    sadepilvi1.setKissanTunnusNro(1); 
    sadepilvi2.setKissanTunnusNro(2); 
    sadepilvi3.setKissanTunnusNro(3); 
    sadepilvinen11.setOmistajanTunnusNro(1); 
    sadepilvinen21.setOmistajanTunnusNro(2); 
    sadepilvinen31.setOmistajanTunnusNro(3); 
    rekisteri.lisaa(sadepilvi1); 
    rekisteri.lisaa(sadepilvi2); 
    rekisteri.lisaa(sadepilvi3); 
    rekisteri.lisaa(sadepilvinen11); 
    rekisteri.lisaa(sadepilvinen21); 
    rekisteri.lisaa(sadepilvinen31); 
    rekisteri.setTiedosto(hakemisto);  // nimi annettava koska uusi poisti sen
    rekisteri.tallenna(); 
    rekisteri = new Rekisteri(); 
    rekisteri.lueTiedostosta(hakemisto); 
    Collection<Kissa> kaikki = rekisteri.etsiKissat("",-1); 
    Iterator<Kissa> it = kaikki.iterator(); 
    assertEquals("From: Rekisteri line: 371", sadepilvi1, it.next()); 
    assertEquals("From: Rekisteri line: 372", sadepilvi2, it.next()); 
    assertEquals("From: Rekisteri line: 373", sadepilvi3, it.next()); 
    assertEquals("From: Rekisteri line: 374", false, it.hasNext()); 
    List<Omistaja> loytyneet = rekisteri.annaOmistajat(sadepilvi1); 
    Iterator<Omistaja> io = loytyneet.iterator(); 
    assertEquals("From: Rekisteri line: 377", sadepilvinen11, io.next()); 
    assertEquals("From: Rekisteri line: 378", false, io.hasNext()); 
    loytyneet = rekisteri.annaOmistajat(sadepilvi2); 
    io = loytyneet.iterator(); 
    assertEquals("From: Rekisteri line: 381", sadepilvinen21, io.next()); 
    assertEquals("From: Rekisteri line: 382", false, io.hasNext()); 
    rekisteri.lisaa(sadepilvi3); 
    rekisteri.lisaa(sadepilvinen31); 
    rekisteri.tallenna();  // tekee molemmista .bak
    assertEquals("From: Rekisteri line: 386", true, ftied.delete()); 
    assertEquals("From: Rekisteri line: 387", true, fhtied.delete()); 
    File fbak = new File(hakemisto+"/kissat.bak"); 
    File fhbak = new File(hakemisto+"/omistajat.bak"); 
    assertEquals("From: Rekisteri line: 390", true, fbak.delete()); 
    assertEquals("From: Rekisteri line: 391", true, fhbak.delete()); 
    assertEquals("From: Rekisteri line: 392", true, dir.delete()); 
  } // Generated by ComTest END
}