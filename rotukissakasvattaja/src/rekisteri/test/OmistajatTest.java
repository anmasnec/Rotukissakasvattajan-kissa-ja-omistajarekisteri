package rekisteri.test;
// Generated by ComTest BEGIN
import java.io.File;
import rekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import static rekisteri.Omistajat.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.01 20:50:35 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class OmistajatTest {



  // Generated by ComTest BEGIN
  /** testLisaa62 */
  @Test
  public void testLisaa62() {    // Omistajat: 62
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    assertEquals("From: Omistajat line: 65", 0, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 66", 1, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen2); assertEquals("From: Omistajat line: 67", 2, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 68", 3, omistajat.getLkm()); 
    assertEquals("From: Omistajat line: 69", sadepilvinen1, omistajat.annaOmistaja(0)); 
    assertEquals("From: Omistajat line: 70", sadepilvinen2, omistajat.annaOmistaja(1)); 
    assertEquals("From: Omistajat line: 71", sadepilvinen1, omistajat.annaOmistaja(2)); 
    assertEquals("From: Omistajat line: 72", false, omistajat.annaOmistaja(1) == sadepilvinen1); 
    assertEquals("From: Omistajat line: 73", true, omistajat.annaOmistaja(1) == sadepilvinen2); 
    try {
    assertEquals("From: Omistajat line: 74", sadepilvinen1, omistajat.annaOmistaja(3)); 
    fail("Omistajat: 74 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 75", 4, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 76", 5, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 77", 6, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 78", 7, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 79", 8, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 80", 9, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 81", 10, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta133 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta133() throws SailoException {    // Omistajat: 133
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    sadepilvinen1.taytaKissanOmistaja(1); 
    sadepilvinen2.taytaKissanOmistaja(2); 
    String hakemisto = "testiKissakaveri"; 
    String tiedNimi = hakemisto+"/omistajat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    omistajat.lueTiedostosta(tiedNimi); 
    fail("Omistajat: 147 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    omistajat.lisaa(sadepilvinen1); 
    omistajat.lisaa(sadepilvinen2); 
    omistajat.tallenna(); 
    omistajat = new Omistajat();  // Poistetaan vanhat luomalla uusi
    omistajat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Omistaja> i = omistajat.iterator(); 
    assertEquals("From: Omistajat line: 154", sadepilvinen1, i.next()); 
    assertEquals("From: Omistajat line: 155", sadepilvinen2, i.next()); 
    assertEquals("From: Omistajat line: 156", false, i.hasNext()); 
    omistajat.lisaa(sadepilvinen2); 
    omistajat.tallenna(); 
    assertEquals("From: Omistajat line: 159", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Omistajat line: 161", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testOmistajatIterator304 
   * @throws SailoException when error
   */
  @Test
  public void testOmistajatIterator304() throws SailoException {    // Omistajat: 304
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); 
    omistajat.lisaa(sadepilvinen1); 
    omistajat.lisaa(sadepilvinen2); 
    omistajat.lisaa(sadepilvinen1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Omistaja omistaja:omistajat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+omistaja.getOmistajanTunnusNro()); 
    String tulos = " " + sadepilvinen1.getOmistajanTunnusNro() + " " + sadepilvinen2.getOmistajanTunnusNro() + " " + sadepilvinen1.getOmistajanTunnusNro(); 
    assertEquals("From: Omistajat line: 323", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Omistaja>  i=omistajat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Omistaja omistaja = i.next(); 
    ids.append(" "+omistaja.getOmistajanTunnusNro()); 
    }
    assertEquals("From: Omistajat line: 331", tulos, ids.toString()); 
    Iterator<Omistaja>  i=omistajat.iterator(); 
    assertEquals("From: Omistajat line: 334", true, i.next() == sadepilvinen1); 
    assertEquals("From: Omistajat line: 335", true, i.next() == sadepilvinen2); 
    assertEquals("From: Omistajat line: 336", true, i.next() == sadepilvinen1); 
    try {
    i.next(); 
    fail("Omistajat: 338 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testMain519 
   * @throws SailoException when error
   */
  @Test
  public void testMain519() throws SailoException {    // Omistajat: 519
    Omistajat omistajat = new Omistajat(); 
    Omistaja omistaja1 = new Omistaja(); omistaja1.parse("1|Sade Pilvinen|Pilvitie 2 B 16|97612|Pilvelä|0601456387|05.06.1991||"); 
    Omistaja omistaja2 = new Omistaja(); omistaja2.parse("2|Kukka Metsälä|Metsäpolku 8|26100|Metsäkylä|0608123445|16.11.1984|Toimii itsekin kasvattajana|"); 
    Omistaja omistaja3 = new Omistaja(); omistaja3.parse("3|Kari Luminen|Tihkutie 50|02210|Räntälä|0605419846|04.12.1960||"); 
    Omistaja omistaja4 = new Omistaja(); omistaja4.parse("4|Lilja Lehtinen|Lehtikatu 1 A 4|33541|Lehtelä|0701123774|12.03.1995||"); 
    Omistaja omistaja5 = new Omistaja(); omistaja5.parse("5|Pena Kissala|Kattikuja 6|29190|Kissacity|0606287001|08.09.1973|Kokenut näyttelyissäkävijä|"); 
    omistajat.lisaa(omistaja1); omistajat.lisaa(omistaja2); omistajat.lisaa(omistaja3); omistajat.lisaa(omistaja4); omistajat.lisaa(omistaja5); 
  } // Generated by ComTest END
}