package rekisteri.test;
// Generated by ComTest BEGIN
import rekisteri.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.20 23:14:19 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class OmistajatTest {



  // Generated by ComTest BEGIN
  /** testLisaa59 */
  @Test
  public void testLisaa59() {    // Omistajat: 59
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    assertEquals("From: Omistajat line: 62", 0, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 63", 1, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen2); assertEquals("From: Omistajat line: 64", 2, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 65", 3, omistajat.getLkm()); 
    assertEquals("From: Omistajat line: 66", sadepilvinen1, omistajat.annaOmistaja(0)); 
    assertEquals("From: Omistajat line: 67", sadepilvinen2, omistajat.annaOmistaja(1)); 
    assertEquals("From: Omistajat line: 68", sadepilvinen1, omistajat.annaOmistaja(2)); 
    assertEquals("From: Omistajat line: 69", false, omistajat.annaOmistaja(1) == sadepilvinen1); 
    assertEquals("From: Omistajat line: 70", true, omistajat.annaOmistaja(1) == sadepilvinen2); 
    try {
    assertEquals("From: Omistajat line: 71", sadepilvinen1, omistajat.annaOmistaja(3)); 
    fail("Omistajat: 71 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 72", 4, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 73", 5, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 74", 6, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 75", 7, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 76", 8, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 77", 9, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); assertEquals("From: Omistajat line: 78", 10, omistajat.getLkm()); 
    omistajat.lisaa(sadepilvinen1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa97 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa97() throws SailoException,CloneNotSupportedException {    // Omistajat: 97
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); 
    assertEquals("From: Omistajat line: 103", 0, omistajat.getLkm()); 
    omistajat.korvaaTaiLisaa(sadepilvinen1); assertEquals("From: Omistajat line: 104", 1, omistajat.getLkm()); 
    omistajat.korvaaTaiLisaa(sadepilvinen2); assertEquals("From: Omistajat line: 105", 2, omistajat.getLkm()); 
    Omistaja sadepilvinen3 = sadepilvinen1.clone(); 
    sadepilvinen3.aseta(3,"kkk"); 
    Iterator<Omistaja> it = omistajat.iterator(); 
    assertEquals("From: Omistajat line: 109", true, it.next() == sadepilvinen1); 
    omistajat.korvaaTaiLisaa(sadepilvinen3); assertEquals("From: Omistajat line: 110", 2, omistajat.getLkm()); 
    it = omistajat.iterator(); 
    Omistaja o0 = it.next(); 
    assertEquals("From: Omistajat line: 113", sadepilvinen3, o0); 
    assertEquals("From: Omistajat line: 114", true, o0 == sadepilvinen3); 
    assertEquals("From: Omistajat line: 115", false, o0 == sadepilvinen1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista149 
   * @throws SailoException when error
   */
  @Test
  public void testPoista149() throws SailoException {    // Omistajat: 149
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(), sadepilvinen3 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); sadepilvinen3.rekisteroi(); 
    int id1 = sadepilvinen1.getOmistajanTunnusNro(); 
    omistajat.lisaa(sadepilvinen1); omistajat.lisaa(sadepilvinen2); omistajat.lisaa(sadepilvinen3); 
    assertEquals("From: Omistajat line: 156", 1, omistajat.poista(id1+1)); 
    assertEquals("From: Omistajat line: 157", null, omistajat.annaId(id1+1)); assertEquals("From: Omistajat line: 157", 2, omistajat.getLkm()); 
    assertEquals("From: Omistajat line: 158", 1, omistajat.poista(id1)); assertEquals("From: Omistajat line: 158", 1, omistajat.getLkm()); 
    assertEquals("From: Omistajat line: 159", 0, omistajat.poista(id1+3)); assertEquals("From: Omistajat line: 159", 1, omistajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta181 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta181() throws SailoException {    // Omistajat: 181
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    sadepilvinen1.taytaKissanOmistaja(); 
    sadepilvinen2.taytaKissanOmistaja(); 
    String hakemisto = "testiKissakaveri"; 
    String tiedNimi = hakemisto+"/omistajat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    omistajat.lueTiedostosta(tiedNimi); 
    fail("Omistajat: 195 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    omistajat.lisaa(sadepilvinen1); 
    omistajat.lisaa(sadepilvinen2); 
    omistajat.tallenna(); 
    omistajat = new Omistajat();  // Poistetaan vanhat luomalla uusi
    omistajat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Omistaja> i = omistajat.iterator(); 
    assertEquals("From: Omistajat line: 202", sadepilvinen1, i.next()); 
    assertEquals("From: Omistajat line: 203", sadepilvinen2, i.next()); 
    assertEquals("From: Omistajat line: 204", false, i.hasNext()); 
    omistajat.lisaa(sadepilvinen2); 
    omistajat.tallenna(); 
    assertEquals("From: Omistajat line: 207", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Omistajat line: 209", true, fbak.delete()); 
    assertEquals("From: Omistajat line: 210", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testOmistajatIterator340 
   * @throws SailoException when error
   */
  @Test
  public void testOmistajatIterator340() throws SailoException {    // Omistajat: 340
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); 
    omistajat.lisaa(sadepilvinen1); 
    omistajat.lisaa(sadepilvinen2); 
    omistajat.lisaa(sadepilvinen1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Omistaja omistaja:omistajat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+omistaja.getOmistajanTunnusNro()); 
    String tulos = " " + sadepilvinen1.getOmistajanTunnusNro() + " " + sadepilvinen2.getOmistajanTunnusNro() + " " + sadepilvinen1.getOmistajanTunnusNro(); 
    assertEquals("From: Omistajat line: 359", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Omistaja>  i=omistajat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Omistaja omistaja = i.next(); 
    ids.append(" "+omistaja.getOmistajanTunnusNro()); 
    }
    assertEquals("From: Omistajat line: 367", tulos, ids.toString()); 
    Iterator<Omistaja>  i=omistajat.iterator(); 
    assertEquals("From: Omistajat line: 370", true, i.next() == sadepilvinen1); 
    assertEquals("From: Omistajat line: 371", true, i.next() == sadepilvinen2); 
    assertEquals("From: Omistajat line: 372", true, i.next() == sadepilvinen1); 
    try {
    i.next(); 
    fail("Omistajat: 374 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId451 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId451() throws SailoException {    // Omistajat: 451
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(), sadepilvinen3 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); sadepilvinen3.rekisteroi(); 
    int id1 = sadepilvinen1.getOmistajanTunnusNro(); 
    omistajat.lisaa(sadepilvinen1); omistajat.lisaa(sadepilvinen2); omistajat.lisaa(sadepilvinen3); 
    assertEquals("From: Omistajat line: 458", true, omistajat.annaId(id1  ) == sadepilvinen1); 
    assertEquals("From: Omistajat line: 459", true, omistajat.annaId(id1+1) == sadepilvinen2); 
    assertEquals("From: Omistajat line: 460", true, omistajat.annaId(id1+2) == sadepilvinen3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId475 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId475() throws SailoException {    // Omistajat: 475
    Omistajat omistajat = new Omistajat(); 
    Omistaja sadepilvinen1 = new Omistaja(), sadepilvinen2 = new Omistaja(), sadepilvinen3 = new Omistaja(); 
    sadepilvinen1.rekisteroi(); sadepilvinen2.rekisteroi(); sadepilvinen3.rekisteroi(); 
    int id1 = sadepilvinen1.getOmistajanTunnusNro(); 
    omistajat.lisaa(sadepilvinen1); omistajat.lisaa(sadepilvinen2); omistajat.lisaa(sadepilvinen3); 
    assertEquals("From: Omistajat line: 482", 1, omistajat.etsiId(id1+1)); 
    assertEquals("From: Omistajat line: 483", 2, omistajat.etsiId(id1+2)); 
  } // Generated by ComTest END
}