package rekisteri.test;
// Generated by ComTest BEGIN
import rekisteri.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.22 18:27:31 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class KissatTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa65 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa65() throws SailoException,CloneNotSupportedException {    // Kissat: 65
    Kissat kissat = new Kissat(); 
    Kissa sadepilvi1 = new Kissa(), sadepilvi2 = new Kissa(); 
    sadepilvi1.rekisteroi(); sadepilvi2.rekisteroi(); 
    assertEquals("From: Kissat line: 71", 0, kissat.getLkm()); 
    kissat.korvaaTaiLisaa(sadepilvi1); assertEquals("From: Kissat line: 72", 1, kissat.getLkm()); 
    kissat.korvaaTaiLisaa(sadepilvi2); assertEquals("From: Kissat line: 73", 2, kissat.getLkm()); 
    Kissa sadepilvi3 = sadepilvi1.clone(); 
    sadepilvi3.aseta(3,"kkk"); 
    Iterator<Kissa> it = kissat.iterator(); 
    assertEquals("From: Kissat line: 77", true, it.next() == sadepilvi1); 
    kissat.korvaaTaiLisaa(sadepilvi3); assertEquals("From: Kissat line: 78", 2, kissat.getLkm()); 
    it = kissat.iterator(); 
    Kissa k0 = it.next(); 
    assertEquals("From: Kissat line: 81", sadepilvi3, k0); 
    assertEquals("From: Kissat line: 82", true, k0 == sadepilvi3); 
    assertEquals("From: Kissat line: 83", false, k0 == sadepilvi1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista117 */
  @Test
  public void testPoista117() {    // Kissat: 117
    Kissat kissat = new Kissat(); 
    Kissa sadepilvi1 = new Kissa(), sadepilvi2 = new Kissa(), sadepilvi3 = new Kissa(); 
    sadepilvi1.rekisteroi(); sadepilvi2.rekisteroi(); sadepilvi3.rekisteroi(); 
    int id1 = sadepilvi1.getKissanTunnusNro(); 
    kissat.lisaa(sadepilvi1); kissat.lisaa(sadepilvi2); kissat.lisaa(sadepilvi3); 
    assertEquals("From: Kissat line: 123", 1, kissat.poista(id1+1)); 
    assertEquals("From: Kissat line: 124", null, kissat.annaId(id1+1)); assertEquals("From: Kissat line: 124", 2, kissat.getLkm()); 
    assertEquals("From: Kissat line: 125", 1, kissat.poista(id1)); assertEquals("From: Kissat line: 125", 1, kissat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta148 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta148() throws SailoException {    // Kissat: 148
    Kissat kissat = new Kissat(); 
    Kissa sadepilvi1 = new Kissa(), sadepilvi2 = new Kissa(); 
    sadepilvi1.taytaKissaTiedoilla(); 
    sadepilvi2.taytaKissaTiedoilla(); 
    String hakemisto = "testiKissakaveri"; 
    String tiedNimi = hakemisto+"/kissat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    kissat.lueTiedostosta(tiedNimi); 
    fail("Kissat: 162 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kissat.lisaa(sadepilvi1); 
    kissat.lisaa(sadepilvi2); 
    kissat.tallenna(); 
    kissat = new Kissat();  // Poistetaan vanhat luomalla uusi
    kissat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Kissa> i = kissat.iterator(); 
    assertEquals("From: Kissat line: 169", sadepilvi1, i.next()); 
    assertEquals("From: Kissat line: 170", sadepilvi2, i.next()); 
    assertEquals("From: Kissat line: 171", false, i.hasNext()); 
    kissat.lisaa(sadepilvi2); 
    kissat.tallenna(); 
    assertEquals("From: Kissat line: 174", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Kissat line: 176", true, fbak.delete()); 
    assertEquals("From: Kissat line: 177", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKissatIterator305 
   * @throws SailoException when error
   */
  @Test
  public void testKissatIterator305() throws SailoException {    // Kissat: 305
    Kissat kissat = new Kissat(); 
    Kissa sadepilvi1 = new Kissa(), sadepilvi2 = new Kissa(); 
    sadepilvi1.rekisteroi(); sadepilvi2.rekisteroi(); 
    kissat.lisaa(sadepilvi1); 
    kissat.lisaa(sadepilvi2); 
    kissat.lisaa(sadepilvi1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Kissa kissa:kissat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+kissa.getKissanTunnusNro()); 
    String tulos = " " + sadepilvi1.getKissanTunnusNro() + " " + sadepilvi2.getKissanTunnusNro() + " " + sadepilvi1.getKissanTunnusNro(); 
    assertEquals("From: Kissat line: 324", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Kissa>  i=kissat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Kissa kissa = i.next(); 
    ids.append(" "+kissa.getKissanTunnusNro()); 
    }
    assertEquals("From: Kissat line: 332", tulos, ids.toString()); 
    Iterator<Kissa>  i=kissat.iterator(); 
    assertEquals("From: Kissat line: 335", true, i.next() == sadepilvi1); 
    assertEquals("From: Kissat line: 336", true, i.next() == sadepilvi2); 
    assertEquals("From: Kissat line: 337", true, i.next() == sadepilvi1); 
    try {
    i.next(); 
    fail("Kissat: 339 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi413 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi413() throws SailoException {    // Kissat: 413
    Kissat kissat = new Kissat(); 
    Kissa kissa1 = new Kissa(); kissa1.parse("1|1|Kissakaveri Sadepilvi|Ragdoll|RAG n 03|Ruskeanaamio bicolour|"); 
    Kissa kissa2 = new Kissa(); kissa2.parse("2|2|Kissakaveri Saniainen|Ragdoll|RAG n 04|Ruskeanaamio mitted|"); 
    Kissa kissa3 = new Kissa(); kissa3.parse("3|3|Kissakaveri Sateenkaari|Ragdoll|RAG n 03|Ruskeanaamio bicolour|"); 
    Kissa kissa4 = new Kissa(); kissa4.parse("4|4|Kissakaveri April|Ragdoll|RAG a|Sininaamio colourpoint|"); 
    Kissa kissa5 = new Kissa(); kissa5.parse("5|5|Kissakaveri Peter Pan|Ragdoll|RAG a 04|Sininaamio mitted|"); 
    kissat.lisaa(kissa1); kissat.lisaa(kissa2); kissat.lisaa(kissa3); kissat.lisaa(kissa4); kissat.lisaa(kissa5); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId444 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId444() throws SailoException {    // Kissat: 444
    Kissat kissat = new Kissat(); 
    Kissa sadepilvi1 = new Kissa(), sadepilvi2 = new Kissa(), sadepilvi3 = new Kissa(); 
    sadepilvi1.rekisteroi(); sadepilvi2.rekisteroi(); sadepilvi3.rekisteroi(); 
    int id1 = sadepilvi1.getKissanTunnusNro(); 
    kissat.lisaa(sadepilvi1); kissat.lisaa(sadepilvi2); kissat.lisaa(sadepilvi3); 
    assertEquals("From: Kissat line: 451", true, kissat.annaId(id1  ) == sadepilvi1); 
    assertEquals("From: Kissat line: 452", true, kissat.annaId(id1+1) == sadepilvi2); 
    assertEquals("From: Kissat line: 453", true, kissat.annaId(id1+2) == sadepilvi3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId468 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId468() throws SailoException {    // Kissat: 468
    Kissat kissat = new Kissat(); 
    Kissa sadepilvi1 = new Kissa(), sadepilvi2 = new Kissa(), sadepilvi3 = new Kissa(); 
    sadepilvi1.rekisteroi(); sadepilvi2.rekisteroi(); sadepilvi3.rekisteroi(); 
    int id1 = sadepilvi1.getKissanTunnusNro(); 
    kissat.lisaa(sadepilvi1); kissat.lisaa(sadepilvi2); kissat.lisaa(sadepilvi3); 
    assertEquals("From: Kissat line: 475", sadepilvi1, kissat.etsiId(id1)); 
  } // Generated by ComTest END
}